/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package team.isaz.rsa;

import java.awt.Color;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.io.UnsupportedEncodingException;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.security.InvalidKeyException;
import java.security.Key;
import java.security.KeyFactory;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import org.apache.commons.codec.DecoderException;

import org.apache.commons.codec.binary.Hex;

/**
 *
 * @author Arkanium77
 */
public class Window extends javax.swing.JFrame {

    /**
     * Creates new form Window
     */
    public Window() {
        initComponents();
        jEditorPane1.setContentType("text/html");
        jEditorPane1.setEditable(false);
        jEditorPane2.setContentType("text/html");
        jEditorPane2.setEditable(false);
        jEditorPane3.setContentType("text/html");
        jEditorPane3.setEditable(false);
        kPublic.setEditable(false);
        kPublic.setBackground(Color.yellow);
        kPrivate.setEditable(false);
        jEditorPane1.setText("<html> <h2 align=center>Генератор RSA-ключей</h2> "
                + "Эта вкладка позволяет вам сгенерировать 2 RSA-ключа. "
                + "Публичный и приватный.  Зашифруйте ОТКРЫТЫМ ключем сообщение."
                + " Теперь расшифровать его можно только парным ему ПРИВАТНЫМ ключом. "
                + "Смело передавайте сообщение другу, чьим ключом вы шифровали,"
                + " и только он сможет читать ваши сообщения (даже вы сами их больше не расшифруете)."
                + "</html>");
        jEditorPane2.setText("<html> <h2 align=center>Шифратор сообщений</h2> "
                + "Эта вкладка позволяет вам сгенерировать секретное сообщение, "
                + "зашифровав его с помощью ОТКРЫТОГО ключа. "
                + "После шифровки прочесть его можно будет только при "
                + "помощи парного ему ПРИВАТНОГО ключа."
                + "</html>");
        jEditorPane3.setText("<html> <h2 align=center>Дешифратор сообщений</h2> "
                + "Эта вкладка позволяет вам расшифровать секретное сообщение "
                + "при помощи ПРИВАТНОГО ключа. "
                + "С помощью ПРИВАТНОГО ключа можно"
                + " расшифровать только сообщения, зашифрованные парным ему "
                + "ОТКРЫТЫМ ключом. И, если расшифровка удалась, вы можете быть "
                + "уверены, что автором сообщения является тот же человек,"
                + "которому вы дали свой открытый ключ."
                + "</html>");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabPanel = new javax.swing.JTabbedPane();
        keyPane = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jEditorPane1 = new javax.swing.JEditorPane();
        Gen = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        kPublic = new javax.swing.JEditorPane();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        kPrivate = new javax.swing.JEditorPane();
        jLabel2 = new javax.swing.JLabel();
        encryptPane = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jEditorPane2 = new javax.swing.JEditorPane();
        jLabel3 = new javax.swing.JLabel();
        keyField1 = new javax.swing.JTextField();
        Chipher = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        kPublic1 = new javax.swing.JEditorPane();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        kPublic2 = new javax.swing.JEditorPane();
        jLabel6 = new javax.swing.JLabel();
        decryptPane = new javax.swing.JPanel();
        jScrollPane7 = new javax.swing.JScrollPane();
        jEditorPane3 = new javax.swing.JEditorPane();
        jLabel7 = new javax.swing.JLabel();
        keyField2 = new javax.swing.JTextField();
        Unchipher = new javax.swing.JButton();
        jScrollPane8 = new javax.swing.JScrollPane();
        kPublic3 = new javax.swing.JEditorPane();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane9 = new javax.swing.JScrollPane();
        kPublic4 = new javax.swing.JEditorPane();
        jLabel10 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("RSA-шифрование");
        setResizable(false);
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.LINE_AXIS));

        jScrollPane1.setFocusable(false);

        jEditorPane1.setEditable(false);
        jEditorPane1.setBackground(javax.swing.UIManager.getDefaults().getColor("Panel.background"));
        jEditorPane1.setContentType("text/html "); // NOI18N
        jScrollPane1.setViewportView(jEditorPane1);

        Gen.setText("Генерировать");
        Gen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GenActionPerformed(evt);
            }
        });

        jScrollPane2.setFocusable(false);

        kPublic.setEditable(false);
        kPublic.setBackground(javax.swing.UIManager.getDefaults().getColor("Panel.background"));
        kPublic.setContentType("text/html "); // NOI18N
        kPublic.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                kPublicFocusGained(evt);
            }
        });
        jScrollPane2.setViewportView(kPublic);

        jLabel1.setText("Публичный ключ:");

        jScrollPane3.setFocusable(false);

        kPrivate.setEditable(false);
        kPrivate.setBackground(javax.swing.UIManager.getDefaults().getColor("Panel.background"));
        kPrivate.setContentType("text/html "); // NOI18N
        kPrivate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                kPrivateFocusGained(evt);
            }
        });
        jScrollPane3.setViewportView(kPrivate);

        jLabel2.setText("Приватный ключ:");

        javax.swing.GroupLayout keyPaneLayout = new javax.swing.GroupLayout(keyPane);
        keyPane.setLayout(keyPaneLayout);
        keyPaneLayout.setHorizontalGroup(
            keyPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(keyPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(keyPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(keyPaneLayout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1069, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(Gen, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE))
                    .addGroup(keyPaneLayout.createSequentialGroup()
                        .addGroup(keyPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane3))
                .addContainerGap())
        );
        keyPaneLayout.setVerticalGroup(
            keyPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(keyPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(keyPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 136, Short.MAX_VALUE)
                    .addComponent(Gen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 298, Short.MAX_VALUE)
                .addContainerGap())
        );

        tabPanel.addTab("Генерировать Ключи", keyPane);

        jScrollPane4.setFocusable(false);

        jEditorPane2.setEditable(false);
        jEditorPane2.setBackground(javax.swing.UIManager.getDefaults().getColor("Panel.background"));
        jEditorPane2.setContentType("text/html "); // NOI18N
        jScrollPane4.setViewportView(jEditorPane2);

        jLabel3.setText("Открытый ключ:");

        keyField1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                keyField1FocusGained(evt);
            }
        });
        keyField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keyField1ActionPerformed(evt);
            }
        });

        Chipher.setText("Зашифровать");
        Chipher.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ChipherActionPerformed(evt);
            }
        });

        jScrollPane5.setFocusable(false);

        kPublic1.setContentType("text/html "); // NOI18N
        kPublic1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                kPublic1FocusGained(evt);
            }
        });
        jScrollPane5.setViewportView(kPublic1);

        jLabel4.setText("Шифруемое сообщение:");

        jLabel5.setFont(jLabel5.getFont().deriveFont(jLabel5.getFont().getSize()+37f));
        jLabel5.setText("→");

        jScrollPane6.setFocusable(false);

        kPublic2.setEditable(false);
        kPublic2.setBackground(javax.swing.UIManager.getDefaults().getColor("Panel.background"));
        kPublic2.setContentType("text/html "); // NOI18N
        kPublic2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                kPublic2FocusGained(evt);
            }
        });
        jScrollPane6.setViewportView(kPublic2);

        jLabel6.setText("Зашифрованное сообщение:");

        javax.swing.GroupLayout encryptPaneLayout = new javax.swing.GroupLayout(encryptPane);
        encryptPane.setLayout(encryptPaneLayout);
        encryptPaneLayout.setHorizontalGroup(
            encryptPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, encryptPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(encryptPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, encryptPaneLayout.createSequentialGroup()
                        .addGroup(encryptPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(encryptPaneLayout.createSequentialGroup()
                                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 584, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel5))
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(encryptPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(jScrollPane6)))
                    .addComponent(keyField1)
                    .addGroup(encryptPaneLayout.createSequentialGroup()
                        .addGroup(encryptPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 1069, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Chipher, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)))
                .addGap(17, 17, 17))
        );
        encryptPaneLayout.setVerticalGroup(
            encryptPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(encryptPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(encryptPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Chipher, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(keyField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(encryptPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(encryptPaneLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 204, Short.MAX_VALUE)
                        .addComponent(jLabel5)
                        .addGap(198, 198, 198))
                    .addGroup(encryptPaneLayout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane5)
                        .addContainerGap())
                    .addGroup(encryptPaneLayout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane6)
                        .addContainerGap())))
        );

        tabPanel.addTab("Зашифровать сообщение", encryptPane);

        jScrollPane7.setFocusable(false);

        jEditorPane3.setEditable(false);
        jEditorPane3.setBackground(javax.swing.UIManager.getDefaults().getColor("Panel.background"));
        jEditorPane3.setContentType("text/html "); // NOI18N
        jScrollPane7.setViewportView(jEditorPane3);

        jLabel7.setText("Приватный ключ:");

        keyField2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                keyField2FocusGained(evt);
            }
        });
        keyField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keyField2ActionPerformed(evt);
            }
        });

        Unchipher.setText("Расшифровать");
        Unchipher.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UnchipherActionPerformed(evt);
            }
        });

        jScrollPane8.setFocusable(false);

        kPublic3.setContentType("text/html "); // NOI18N
        kPublic3.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                kPublic3FocusGained(evt);
            }
        });
        jScrollPane8.setViewportView(kPublic3);

        jLabel8.setText("Зашифрованное сообщение:");

        jLabel9.setFont(jLabel9.getFont().deriveFont(jLabel9.getFont().getSize()+37f));
        jLabel9.setText("→");

        jScrollPane9.setFocusable(false);

        kPublic4.setEditable(false);
        kPublic4.setBackground(javax.swing.UIManager.getDefaults().getColor("Panel.background"));
        kPublic4.setContentType("text/html "); // NOI18N
        kPublic4.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                kPublic4FocusGained(evt);
            }
        });
        jScrollPane9.setViewportView(kPublic4);

        jLabel10.setText("Расшифровка:");

        javax.swing.GroupLayout decryptPaneLayout = new javax.swing.GroupLayout(decryptPane);
        decryptPane.setLayout(decryptPaneLayout);
        decryptPaneLayout.setHorizontalGroup(
            decryptPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, decryptPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(decryptPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, decryptPaneLayout.createSequentialGroup()
                        .addGroup(decryptPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(decryptPaneLayout.createSequentialGroup()
                                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 584, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel9))
                            .addComponent(jLabel8))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(decryptPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel10)
                            .addComponent(jScrollPane9)))
                    .addComponent(keyField2)
                    .addGroup(decryptPaneLayout.createSequentialGroup()
                        .addGroup(decryptPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 1069, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Unchipher, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)))
                .addGap(17, 17, 17))
        );
        decryptPaneLayout.setVerticalGroup(
            decryptPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(decryptPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(decryptPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Unchipher, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(keyField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(decryptPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(decryptPaneLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 204, Short.MAX_VALUE)
                        .addComponent(jLabel9)
                        .addGap(198, 198, 198))
                    .addGroup(decryptPaneLayout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane8)
                        .addContainerGap())
                    .addGroup(decryptPaneLayout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane9)
                        .addContainerGap())))
        );

        tabPanel.addTab("Расшифровать сообщение", decryptPane);

        getContentPane().add(tabPanel);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private String stringGen(Cipher cipher, String s) throws IllegalBlockSizeException, BadPaddingException {
        String ss = "";
        String[] st = new String[((int) (s.length() / 20)) + 1];
        int stt = 0;
        int last_i=0;
        for (int i = 0; i < s.length()-20; i += 20) {
            last_i=i+20;
            st[stt] = s.substring(i, last_i);
            System.out.print(st[stt]);
            stt++;
        }
        st[stt]=s.substring(last_i);
        for (int i = 0; i < st.length; i++) {
            byte[] bytes = cipher.doFinal(st[i].getBytes());
            ss += Hex.encodeHexString(bytes) + ":::";
        }

        if (ss.endsWith(":::")) {
            ss = ss.substring(0, ss.length() - 3);
        }
        /*
        byte[] bytes = s.getBytes();
        if (bytes.length >= 245) {
            while (bytes.length >= 245) {
                System.out.println(bytes.length);
                byte[] b = new byte[245];
                for (int i = 0; i < b.length; i++) {
                    b[i] = bytes[i];
                }
                byte[] bt = new byte[bytes.length - 245];
                int a = 0;
                for (int i = 245; i < bytes.length; i++) {
                    bt[a] = bytes[i];
                }
                b = cipher.doFinal(b);
                ss += Hex.encodeHexString(b) + ":::";
                bytes = bt;
            }
            bytes=cipher.doFinal(bytes);
            ss += Hex.encodeHexString(bytes);
        } else {
            bytes=cipher.doFinal(bytes);
            ss += Hex.encodeHexString(bytes);
        }*/
        return ss;
    }
    private void ChipherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ChipherActionPerformed
        try {
            byte[] kPub = Hex.decodeHex(keyField1.getText());
            //System.out.println(kPub);
            X509EncodedKeySpec keySpec = new X509EncodedKeySpec(kPub);
            KeyFactory keyFactory = KeyFactory.getInstance("RSA");
            PublicKey key = keyFactory.generatePublic(keySpec);
            //System.out.println(key);

            Cipher cipher = Cipher.getInstance("RSA");
            cipher.init(Cipher.ENCRYPT_MODE, key);

            kPublic2.setText(stringGen(cipher, kPublic1.getText()));

            /*
            byte[] bytes = cipher.doFinal((kPublic1.getText()).getBytes());
            kPublic2.setText(Hex.encodeHexString(bytes));
             */
        } catch (NoSuchAlgorithmException | InvalidKeySpecException | InvalidKeyException | IllegalBlockSizeException | BadPaddingException | NoSuchPaddingException | DecoderException ex) {
            Logger.getLogger(Window.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_ChipherActionPerformed

    private void GenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GenActionPerformed
        
        try {
            Cipher cipher = Cipher.getInstance("RSA");
            KeyPairGenerator pairgen = KeyPairGenerator.getInstance("RSA");
            pairgen.initialize(2048);//2048
            KeyPair keyPair = pairgen.generateKeyPair();
            Key publicKey = keyPair.getPublic();
            Key privateKey = keyPair.getPrivate();
            
            byte[] kPub = publicKey.getEncoded();
            byte[] kPriv = privateKey.getEncoded();
            
            kPublic.setText(Hex.encodeHexString(kPub));
            kPrivate.setText(Hex.encodeHexString(kPriv));

            
        } catch (NoSuchAlgorithmException | NoSuchPaddingException ex) {
            Logger.getLogger(Window.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_GenActionPerformed

    private String stringRes(Cipher cipher, String s) throws DecoderException, IllegalBlockSizeException, BadPaddingException, UnsupportedEncodingException {
        String[] ar = s.split(":::");
        StringBuilder st = new StringBuilder();
        String ss;
        for (int i = 0; i < ar.length; i++) {
            /*System.out.println(i);
            System.out.println(ar[i]);
            System.out.println(Hex.decodeHex(ar[i]));
            System.out.println(cipher.doFinal(Hex.decodeHex(ar[i])));
            System.out.println(new String(cipher.doFinal(Hex.decodeHex(ar[i])), StandardCharsets.UTF_8));*/
            st.append(new String(cipher.doFinal(Hex.decodeHex(ar[i])), Charset.defaultCharset()));
            //System.out.println("\n" + st + "\n");
        }
        ss = st.toString();
        return ss;
    }
    private void UnchipherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UnchipherActionPerformed
        try {
            byte[] kPriv = Hex.decodeHex(keyField2.getText());
            //System.out.println(kPriv);
            PKCS8EncodedKeySpec spec = new PKCS8EncodedKeySpec(kPriv);
            KeyFactory keyFactory = KeyFactory.getInstance("RSA");
            PrivateKey key = keyFactory.generatePrivate(spec);

            Cipher decriptCipher = Cipher.getInstance("RSA");
            decriptCipher.init(Cipher.DECRYPT_MODE, key);
            /*
            byte[] decriptedBytes = decriptCipher.doFinal(Hex.decodeHex(kPublic3.getText()));

            String decripted = doString(decriptedBytes);*/
            kPublic4.setText(stringRes(decriptCipher, kPublic3.getText()));

        } catch (NoSuchAlgorithmException | InvalidKeySpecException | InvalidKeyException | IllegalBlockSizeException | BadPaddingException | NoSuchPaddingException | DecoderException | UnsupportedEncodingException ex) {
            Logger.getLogger(Window.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_UnchipherActionPerformed

    private void keyField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_keyField1ActionPerformed
        ChipherActionPerformed(evt);
    }//GEN-LAST:event_keyField1ActionPerformed

    private void keyField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_keyField2ActionPerformed
        UnchipherActionPerformed(evt);
    }//GEN-LAST:event_keyField2ActionPerformed

    private void kPublicFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_kPublicFocusGained
        StringSelection selection = new StringSelection(kPublic.getText());
        Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
        clipboard.setContents(selection, selection);
        kPublic.selectAll();
    }//GEN-LAST:event_kPublicFocusGained

    private void kPrivateFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_kPrivateFocusGained
        StringSelection selection = new StringSelection(kPrivate.getText());
        Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
        clipboard.setContents(selection, selection);
        kPrivate.selectAll();
    }//GEN-LAST:event_kPrivateFocusGained

    private void kPublic2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_kPublic2FocusGained
        StringSelection selection = new StringSelection(kPublic2.getText());
        Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
        clipboard.setContents(selection, selection);
        kPublic2.selectAll();
    }//GEN-LAST:event_kPublic2FocusGained

    private void kPublic4FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_kPublic4FocusGained
        StringSelection selection = new StringSelection(kPublic4.getText());
        Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
        clipboard.setContents(selection, selection);
        kPublic4.selectAll();
    }//GEN-LAST:event_kPublic4FocusGained

    private void kPublic1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_kPublic1FocusGained
        kPublic1.selectAll();
    }//GEN-LAST:event_kPublic1FocusGained

    private void kPublic3FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_kPublic3FocusGained
        kPublic3.selectAll();
    }//GEN-LAST:event_kPublic3FocusGained

    private void keyField2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_keyField2FocusGained
        keyField2.selectAll();
    }//GEN-LAST:event_keyField2FocusGained

    private void keyField1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_keyField1FocusGained
        keyField1.selectAll();
    }//GEN-LAST:event_keyField1FocusGained


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Chipher;
    private javax.swing.JButton Gen;
    private javax.swing.JButton Unchipher;
    private javax.swing.JPanel decryptPane;
    private javax.swing.JPanel encryptPane;
    private javax.swing.JEditorPane jEditorPane1;
    private javax.swing.JEditorPane jEditorPane2;
    private javax.swing.JEditorPane jEditorPane3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JEditorPane kPrivate;
    private javax.swing.JEditorPane kPublic;
    private javax.swing.JEditorPane kPublic1;
    private javax.swing.JEditorPane kPublic2;
    private javax.swing.JEditorPane kPublic3;
    private javax.swing.JEditorPane kPublic4;
    private javax.swing.JTextField keyField1;
    private javax.swing.JTextField keyField2;
    private javax.swing.JPanel keyPane;
    private javax.swing.JTabbedPane tabPanel;
    // End of variables declaration//GEN-END:variables
}
